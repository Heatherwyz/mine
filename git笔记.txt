自己个人使用，安装好Git后的第一步

1. 安装完成后的第一步，自报家门

$ git config --global user.name "Heatherwyz"
$ git config --global user.email "1085413748@qq.com"
ps：注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置。
2. 本地创建版本库

# 找一个空目录:
$ cd /d/wyz/study

# 创建目录： 
$ mkdir deeptest

# 进入目录： 
$ cd deeptest

# 查看当前目录： 
$ pwd
3. 通过git init命令把这个目录变成Git可以管理的仓库

# 在当前目录新建一个Git代码库
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
4. 添加/提交文件到仓库

添加文件到暂存区

ps：一定要在上面的目录下（子目录也行），不然git找不到你的这个仓库
# 第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p
删除

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
提交文件到本地仓库

# 第二步，用命令git commit告诉Git，把文件提交到仓库
$ git commit -m "wrote a readme file"

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v
# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
5. 查看信息

# 运行git status命令看看结果
$ git status

# git diff顾名思义就是查看difference
$ git diff readme.txt

# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
# 用git log命令查看历史记录
$ git log
$ git log --pretty=oneline
6. 回退

# 回退到上一版本：
$ git reset --hard HEAD^

# 回退到某一个版本：
$ git reset --hard 3628164

# 查看文档
$ cat readme.txt

# git reflog用来记录你的每一次命令文件
$ git reflog

# 用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt

# git checkout -- file可以丢弃工作区的修改
$ git checkout -- readme.txt

# 用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
$ git reset HEAD readme.txt

# 本地删除文件
$ rm test.txt

# 要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$ git rm test.txt
$ git commit -m "remove test.txt"

# 删错了，丢弃本地文档的修改
$ git checkout -- test.txt
远程仓库

1、创建SSH Key：

$ ssh-keygen -t rsa -C "1085413748@qq.com"
2、第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面： 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 点“Add Key”，你就应该看到已经添加的Key

3、本地账户与远程账户建立连接：

$ git remote add origin git@github.com:michaelliao/learngit.git
4、就可以把本地库的所有内容推送到远程库上：

$ git push -u origin master
image

fork库、源库、本地库的同步

1、流程：fork 源仓库 ---① fork--> fork 仓库副本 ---② clone--> local 仓库

当你在远程端（如 Github）上 fork 了别人的一个仓库时，你的远程仓库将新建一份 fork 来的“仓库副本”。如果你想在本地修改这份副本仓库，你需要先 clone 它到本地：

$ git clone git@github.com:Heatherwyz/YOUR_FORK
# 或
$ git clone https://github.com/Heatherwyz/YOUR_FORK
现在你已经有了一份 fork 的本地副本，同时你可以开始在本地修改代码了。

2、同步更新

流程：fork 源仓库 ---① fetch & merge--> local 仓库 ---② push--> fork 仓库副本

# 到目前为止，你本地仓库的远程信息可以用 $ git remote -v 查看到：

$ git remote -v
https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
1. 为了获得 fork 源仓库的更新，现在要添加 fork 源仓库的地址

git remote add upstream "https://github.com/small99/deeptest.git"

ps：这里的 upstream 是可以修改名称的，代表 fork 源仓库的别名。
2. 用 $ git remote -v 查看本地仓库关联的远程地址到

$ git remote -v
origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git(fetch)
upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPO.git (push)
3. 以上设置好了，当你要更新 fork 源仓库的时候，首先 fetch 一份源仓库变动到本地，这回生成一个分支upstream/master

$ git fetch upstream
4. 可以用查看分支命令查看所有分支

$ git branch
5. 然后，切换到本地 master 分支

$ git checkout master
6. 合并 upstream/master 分支的变化到本地 master 分支

$ git merge upstream/master
7. 到这里，仅把 fork 源仓库更新到了本地仓库，如果想要更新远程端的 fork 仓库副本 ，必须向远程端 push 一次

$ git push origin master
8. 最后一步，发送pull request