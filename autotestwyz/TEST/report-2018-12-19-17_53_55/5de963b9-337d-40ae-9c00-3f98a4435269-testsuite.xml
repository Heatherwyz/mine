<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1545213235798" stop="1545213247080">
  <name>test_wyz1</name>
  <labels/>
  <test-cases>
    <test-case start="1545213235798" status="passed" stop="1545213241786">
      <name>TestMessageCenter.test_setBrower</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7184-MainThread"/>
        <label name="host" value="mobile-10-24-51"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1545213235801" status="passed" stop="1545213241786">
          <name>浏览器设置</name>
          <title>浏览器设置</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1545213241788" status="passed" stop="1545213246676">
      <name>TestMessageCenter.test_login</name>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7184-MainThread"/>
        <label name="host" value="mobile-10-24-51"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1545213241790" status="passed" stop="1545213246676">
          <name>登录账号及加载cookie</name>
          <title>登录账号及加载cookie</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1545213246678" status="failed" stop="1545213246946">
      <name>TestMessageCenter.test_7</name>
      <failure>
        <message>AssertionError: assert '订阅失败，请重新退订' == '订阅成功'
  - 订阅失败，请重新退订
  + 订阅成功</message>
        <stack-trace>self = &lt;test_wyz1.TestMessageCenter object at 0x00000000044B4438&gt;

    @pytest.mark.run(order=7)
    @allure.step(title='同花顺理财开关打开')
    def test_7(self):
        global driver
        # 点击同花顺理财进行订阅
        driver.find_element_by_xpath("//*[@id=\"customSetColumn\"]/div/ul/li[3]/div/label/i").click()
        thslcmsg1 = driver.find_element_by_class_name("setTipAlertCon").get_attribute("innerText")
        print("同花顺理财" + thslcmsg1)
&gt;       assert thslcmsg1 == "订阅成功"
E       AssertionError: assert '订阅失败，请重新退订' == '订阅成功'
E         - 订阅失败，请重新退订
E         + 订阅成功

test_wyz1.py:79: AssertionError</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7184-MainThread"/>
        <label name="host" value="mobile-10-24-51"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1545213246679" status="failed" stop="1545213246829">
          <name>同花顺理财开关打开</name>
          <title>同花顺理财开关打开</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
    <test-case start="1545213246949" status="failed" stop="1545213247080">
      <name>TestMessageCenter.test_8</name>
      <failure>
        <message>WebDriverException: Message: unknown error: Element &lt;i&gt;&lt;/i&gt; is not clickable at point (487, 184). Other element would receive the click: &lt;div class="setTipAlert"&gt;...&lt;/div&gt;
  (Session info: chrome=71.0.3578.98)
  (Driver info: chromedriver=2.37.544315 (730aa6a5fdba159ac9f4c1e8cbc59bf1b5ce12b7),platform=Windows NT 6.1.7601 SP1 x86_64)
</message>
        <stack-trace>self = &lt;test_wyz1.TestMessageCenter object at 0x00000000044B4EF0&gt;

    @pytest.mark.run(order=8)
    @allure.step(title='同花顺理财开关关闭')
    def test_8(self):
        global driver
        # 点击同花顺理财取消订阅
&gt;       driver.find_element_by_xpath("//*[@id=\"customSetColumn\"]/div/ul/li[3]/div/label/i").click()

test_wyz1.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\viruser.v-desktop\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webelement.py:80: in click
    self._execute(Command.CLICK_ELEMENT)
C:\Users\viruser.v-desktop\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webelement.py:633: in _execute
    return self._parent.execute(command, params)
C:\Users\viruser.v-desktop\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000000000449F780&gt;
response = {'sessionId': '5d75b8f4648868d0ec9874c7ecf559d4', 'status': 13, 'value': {'message': 'unknown error: Element &lt;i&gt;&lt;/i&gt; i...r info: chromedriver=2.37.544315 (730aa6a5fdba159ac9f4c1e8cbc59bf1b5ce12b7),platform=Windows NT 6.1.7601 SP1 x86_64)'}}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.WebDriverException: Message: unknown error: Element &lt;i&gt;&lt;/i&gt; is not clickable at point (487, 184). Other element would receive the click: &lt;div class="setTipAlert"&gt;...&lt;/div&gt;
E         (Session info: chrome=71.0.3578.98)
E         (Driver info: chromedriver=2.37.544315 (730aa6a5fdba159ac9f4c1e8cbc59bf1b5ce12b7),platform=Windows NT 6.1.7601 SP1 x86_64)

C:\Users\viruser.v-desktop\AppData\Roaming\Python\Python35\site-packages\selenium\webdriver\remote\errorhandler.py:242: WebDriverException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="7184-MainThread"/>
        <label name="host" value="mobile-10-24-51"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps>
        <step start="1545213246950" status="failed" stop="1545213247001">
          <name>同花顺理财开关关闭</name>
          <title>同花顺理财开关关闭</title>
          <attachments/>
          <steps/>
        </step>
      </steps>
    </test-case>
  </test-cases>
</ns0:test-suite>
